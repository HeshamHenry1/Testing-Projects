{
	"info": {
		"_postman_id": "a03bbb6d-0efb-46a2-b054-1d11f4df5ec6",
		"name": "Products",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "49023328",
		"_collection_link": "https://heshamhenry2-367397.postman.co/workspace/AutomationExercise~21ebf12e-1973-4748-a9b5-e59d85b041aa/collection/49023328-a03bbb6d-0efb-46a2-b054-1d11f4df5ec6?action=share&source=collection_link&creator=49023328"
	},
	"item": [
		{
			"name": "Get All Products List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Product has the correct structure (schema)\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const firstProduct = responseData.products[0]; \r",
							"    \r",
							"    pm.expect(firstProduct).to.have.property('id');\r",
							"    pm.expect(firstProduct).to.have.property('name');\r",
							"    pm.expect(firstProduct).to.have.property('price');\r",
							"    pm.expect(firstProduct).to.have.property('brand');\r",
							"    pm.expect(firstProduct).to.have.property('category');\r",
							"    pm.expect(firstProduct.category).to.have.property('usertype');\r",
							"});\r",
							"\r",
							"pm.test(\"Products list is not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.products).to.be.an('array').and.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 405 for wrong method\", function () {\r",
							"    pm.response.to.have.status(405);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseurl}}productsList",
					"host": [
						"{{baseurl}}productsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST To All Products List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 405 for unsupported method\", function ( ) {\r",
							"    pm.response.to.have.status(405);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains the correct error message\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This request method is not supported.\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is text/html\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should not contain a products list\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include('\"products\":');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseurl}}productsList",
					"host": [
						"{{baseurl}}productsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST To Search Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for a valid search\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Products list is returned and is not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.products).to.be.an('array').and.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"All returned product names include the search term 'Top'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    responseData.products.forEach(function(product) {\r",
							"        pm.expect(product.name.toLowerCase()).to.include('tshirt');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "search_product",
							"value": "tshirt",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseurl}}searchProduct",
					"host": [
						"{{baseurl}}searchProduct"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST To Search Product without search_product parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400 for missing search_product parameter\", function ( ) {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains the correct error code and message\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"  \r",
							"    pm.expect(responseData.responseCode).to.equal(405);\r",
							"    \r",
							"    pm.expect(responseData.message).to.equal(\"This request method is not supported.\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body does not contain a 'products' key\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.not.have.property('products');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseurl}}searchProduct",
					"host": [
						"{{baseurl}}searchProduct"
					]
				}
			},
			"response": []
		}
	]
}